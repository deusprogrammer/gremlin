[{"/home/mmain/workspace/gremlin/gremlin-ui/src/index.js":"1","/home/mmain/workspace/gremlin/gremlin-ui/src/App.js":"2","/home/mmain/workspace/gremlin/gremlin-ui/src/reportWebVitals.js":"3","/home/mmain/workspace/gremlin/gremlin-ui/src/routes/Home.jsx":"4","/home/mmain/workspace/gremlin/gremlin-ui/src/routes/Login.jsx":"5","/home/mmain/workspace/gremlin/gremlin-ui/src/routes/EscapeRoomDashboard.jsx":"6","/home/mmain/workspace/gremlin/gremlin-ui/src/routes/ManageUsers.jsx":"7","/home/mmain/workspace/gremlin/gremlin-ui/src/routes/ManagePuzzles.jsx":"8"},{"size":500,"mtime":1612230021870,"results":"9","hashOfConfig":"10"},{"size":1225,"mtime":1623629524730,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1612230021870,"results":"12","hashOfConfig":"10"},{"size":151,"mtime":1623626617800,"results":"13","hashOfConfig":"10"},{"size":2413,"mtime":1623630007990,"results":"14","hashOfConfig":"10"},{"size":2448,"mtime":1623631566740,"results":"15","hashOfConfig":"10"},{"size":1649,"mtime":1624941325110,"results":"16","hashOfConfig":"10"},{"size":183,"mtime":1623629487910,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1as35oz",{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"20"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"20"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"/home/mmain/workspace/gremlin/gremlin-ui/src/index.js",[],["38","39"],"/home/mmain/workspace/gremlin/gremlin-ui/src/App.js",["40"],"import './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport {BrowserRouter as Router, Switch, Route, Link} from 'react-router-dom';\nimport {ToastContainer} from 'react-toastify';\n\nimport Home from './routes/Home';\nimport Login from './routes/Login';\nimport EscapeRoomDashboard from './routes/EscapeRoomDashboard';\nimport ManageUsers from './routes/ManageUsers';\nimport ManagePuzzles from './routes/ManagePuzzles';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <ToastContainer />\n            <Router>\n                <Switch>\n                    <Route exact path={`${process.env.PUBLIC_URL}/`} component={Home} />\n                    <Route exact path={`${process.env.PUBLIC_URL}/login`} component={Login} />\n                    <Route exact path={`${process.env.PUBLIC_URL}/dashboard`} component={EscapeRoomDashboard} />\n                    <Route exact path={`${process.env.PUBLIC_URL}/manage/users`} component={ManageUsers} />\n                    <Route exact path={`${process.env.PUBLIC_URL}/manage/puzzles`} component={ManagePuzzles} />\n                </Switch>\n            </Router>\n        </div>\n    );\n}\n\nexport default App;\n","/home/mmain/workspace/gremlin/gremlin-ui/src/reportWebVitals.js",[],"/home/mmain/workspace/gremlin/gremlin-ui/src/routes/Home.jsx",[],"/home/mmain/workspace/gremlin/gremlin-ui/src/routes/Login.jsx",["41"],"import React, {useState, useEffect} from 'react';\nimport axios from 'axios';\n\nimport {toast} from 'react-toastify';\n\nimport {useHistory} from 'react-router';\n\nconst CONTEXT_ROOT = \"http://localhost:8888\"\n\nconst Login = (props) => {\n    const [username, setUsername] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const history = useHistory();\n\n    const loginUser = async () => {\n        try {\n            let result = await axios.post(`${CONTEXT_ROOT}/users/auth`, {\n                username,\n                password\n            });\n\n            window.localStorage.setItem(\"gremlin-token\", result.data.token);\n            toast(\"Login success!  Now redirecting to dashboard!\", {type: \"info\"});\n            window.setTimeout(() => {\n                history.push(`${process.env.PUBLIC_URL}/dashboard`);\n            }, 1000);\n        } catch (error) {\n            if (error.response && error.response.status === 401) {\n                toast(\"Invalid username or password\", {type: \"error\"});\n                return;\n            } else if (error.response && error.response.status === 404) {\n                toast(\"Gremlin server seems to be down\", {type: \"error\"});\n                return;\n            }\n\n            toast(\"Unexpected error occurred, please try again or contact manager\", {type: \"error\"});\n        }\n    }\n\n    return (\n        <div>\n            <h1>Login</h1>\n            <div className=\"container-fluid\">\n                <div className=\"row\">\n                        <input \n                            type=\"text\" \n                            onChange={(e) => {setUsername(e.target.value)}} \n                            value={username} \n                            placeholder=\"Username\" />\n                </div>\n                <div className=\"row\">\n                        <input \n                            type=\"password\" \n                            onChange={(e) => {setPassword(e.target.value)}} \n                            value={password} \n                            placeholder=\"Password\" />\n                </div>\n                <div className=\"row\">\n                        <button \n                            className=\"btn-primary\" \n                            onClick={() => {loginUser()}}>\n                                Login\n                        </button>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Login;","/home/mmain/workspace/gremlin/gremlin-ui/src/routes/EscapeRoomDashboard.jsx",["42","43"],"import React, {useEffect, useState} from 'react';\nimport axios from 'axios';\nimport {toast} from 'react-toastify';\n\nconst CONTEXT_ROOT = \"http://localhost:8888\"\n\nconst getOptions = () => {\n    return {\n        headers: {\n            \"authorization\": `Bearer ${window.localStorage.getItem(\"gremlin-token\")}`\n        }\n    }\n}\n\nconst EscapeRoomDashboard = (props) => {\n    const [puzzles, setPuzzles] = useState([]);\n    useEffect(async () => {\n        try {\n            let res = await axios.get(`${CONTEXT_ROOT}/puzzles`, getOptions());\n            setPuzzles(res.data);\n        } catch (error) {\n            toast(\"Unable to retrieve puzzles\", {type: \"error\"});\n        }\n    }, []);\n\n    return (\n        <div className=\"container-fluid\">\n            <h1>Dashboard</h1>\n            <hr />\n            <div>\n                <h3>Escape Room Status</h3>\n                <div>Stopped</div>\n            </div>\n            <hr />\n            <div>\n                <h3>Escape Room Controls</h3>\n                <button>Start Escape Room</button>\n                <button>Reset Escape Room</button>\n                <button>Stop Escape Room</button>\n            </div>\n            <hr />\n            <div>\n                <h3>Puzzle Controls</h3>\n                { Object.keys(puzzles).map((key, index) => {\n                    let puzzle = puzzles[key];\n\n                    if (key === \"_start\") {\n                        return;\n                    }\n\n                    return (\n                        <div key={`puzzle-${key}-${index}`} className=\"row\">\n                            <div className=\"col-4\">\n                                {puzzle.name}\n                            </div>\n                            <div className=\"col-2\">\n                                {!puzzle.lastPinged || Date.now() - puzzle.lastPinged > 10 * 1000 ? \n                                <span style={{color: \"red\"}}>Down</span> : \n                                <span style={{color: \"green\"}}>Up</span>}\n                            </div>\n                            <div className=\"col\">\n                                <button>Reset</button>\n                                <button>Activate</button>\n                                <button>Solve</button>\n                            </div>\n                        </div>\n                    )\n                })}\n            </div>\n            <hr />\n        </div>\n    )\n};\n\nexport default EscapeRoomDashboard;","/home/mmain/workspace/gremlin/gremlin-ui/src/routes/ManageUsers.jsx",["44"],"/home/mmain/workspace/gremlin/gremlin-ui/src/routes/ManagePuzzles.jsx",[],{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":5,"column":49,"nodeType":"51","messageId":"52","endLine":5,"endColumn":53},{"ruleId":"49","severity":1,"message":"53","line":1,"column":26,"nodeType":"51","messageId":"52","endLine":1,"endColumn":35},{"ruleId":"54","severity":1,"message":"55","line":17,"column":15,"nodeType":"56","endLine":24,"endColumn":6},{"ruleId":"57","severity":1,"message":"58","line":48,"column":25,"nodeType":"59","messageId":"60","endLine":48,"endColumn":32},{"ruleId":"54","severity":1,"message":"55","line":17,"column":15,"nodeType":"56","endLine":24,"endColumn":6},"no-native-reassign",["61"],"no-negated-in-lhs",["62"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","no-global-assign","no-unsafe-negation"]